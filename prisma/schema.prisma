// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

// `id`: This is the primary key of the `User` table.
// `String`: The type of the `id` is a string.
// `@id`: This marks the field as the primary key.
// `@default(cuid())`: This sets the default value of the `id` to a unique string generated by the `cuid()` function. 
// `cuid()` is a function that generates collision-resistant unique IDs. Every time a new user is created, this function automatically generates a unique ID for them.

// making a custom type of UserRole
enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified Boolean? @map("email_verified")
  image         String?
  // the password is set to `?`means optional because if OAUTH is used then a password field won't be required
  password      String?
  role          UserRole  @default(USER) // default value is USER
  accounts      Account[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}
